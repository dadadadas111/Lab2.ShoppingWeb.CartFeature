@model Lab2.ShoppingWeb.CartFeature.ViewModels.ProductViewModel
@{
    ViewData["Title"] = "Products Page";
    var isAuthenticated = User.Identity?.IsAuthenticated == true;
}
<h2>Product List</h2>

<!-- View Mode Toggle Buttons -->
@* <div> *@
@*     <button onclick="setViewMode('grid')">Grid View</button> *@
@*     <button onclick="setViewMode('list')">List View</button> *@
@* </div> *@

<div class="sort-container active">
    <fieldset class="active">
        <legend for="sort">Sort by:</legend>
        <select id="sort" onchange="applySort()">
            @foreach (var option in new List<(string Value, string Text)>
            {
            ("name_asc", "Name (A-Z)"),
            ("name_desc", "Name (Z-A)"),
            ("price_asc", "Price (Low to High)"),
            ("price_desc", "Price (High to Low)"),
            ("latest", "Newest First")
            })
            {
                <option value="@option.Value" selected="@(Model.SortOption == option.Value ? "selected" : null)">
                    @option.Text
                </option>
            }
        </select>
    </fieldset>
</div>


<div class="pagination-container">
    <button onclick="changePage(1)" @(Model.CurrentPage == 1 ? "disabled" : "")>&laquo; First</button>
    <button onclick="changePage(@(Model.CurrentPage - 1))" @(Model.CurrentPage == 1 ? "disabled" : "")>‹ Prev</button>

    @for (int i = Math.Max(1, Model.CurrentPage - 1); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 1); i++)
    {
        <button class="page-btn @(i == Model.CurrentPage ? "active" : "")" onclick="changePage(@i)">
            @i
        </button>
    }

    <button onclick="changePage(@(Model.CurrentPage + 1))" @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>Next ›</button>
    <button onclick="changePage(@Model.TotalPages)" @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>Last &raquo;</button>

    <p>Page @Model.CurrentPage of @Model.TotalPages</p>
</div>

<!-- Products Container -->
<div id="productContainer" class="grid-view">
    @foreach (var product in Model.Products)
    {
        <div class="product-card" data-id="@product.Id">
            <img src="@product.ImageUrl" alt="@product.Name" class="product-image" />

            <div class="product-info">
                <h3 class="product-name">@product.Name</h3>
                <p class="product-category">@product.Category.Name</p>

                @if (product.Discontinued)
                {
                    <span class="discontinued-badge">Discontinued</span>
                }

                <p class="product-price"><strong>$@product.Price</strong></p>

                <p class="product-stock">
                    <span>Stock: @product.StockQuantity</span> |
                    <span>On Order: @product.UnitsOnOrder</span>
                </p>

                <p class="product-supplier">Supplier: @product.Supplier.Name</p>

                <button class="add-to-cart-btn accent"
                        onclick="openCartModal('@product.Id', '@product.Name', '@product.ImageUrl', @product.Price)">
                    Add to Cart
                </button>
                <span class="cart-status" style="display:none;">🛒</span>

                @if (User.IsInRole("Admin"))
                {
                    <button class="attention" onclick="openEditProductModal('@product.Id', '@product.Name', '@product.Price', '@product.CategoryId', '@product.SupplierId')">Edit</button>
                }

            </div>
        </div>
    }
</div>

@if (Model.Products.Count() == 0)
{
    <center>No products found.</center>
}
else
{
    <div class="pagination-container">
        <button onclick="changePage(1)" @(Model.CurrentPage == 1 ? "disabled" : "")>&laquo; First</button>
        <button onclick="changePage(@(Model.CurrentPage - 1))" @(Model.CurrentPage == 1 ? "disabled" : "")>‹ Prev</button>

        @for (int i = Math.Max(1, Model.CurrentPage - 1); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 1); i++)
        {
            <button class="page-btn @(i == Model.CurrentPage ? "active" : "")" onclick="changePage(@i)">
                @i
            </button>
        }

        <button onclick="changePage(@(Model.CurrentPage + 1))" @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>Next ›</button>
        <button onclick="changePage(@Model.TotalPages)" @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>Last &raquo;</button>

        <p>Page @Model.CurrentPage of @Model.TotalPages</p>
    </div>
}

<div class="filters" id="filters">
    <!-- Category Filter -->
    <div class="filter-section active">

        <fieldset class="active">
            <legend for="searchName">Search</legend>
            <input type="text" id="searchName" placeholder="Search name..." value="@Model.SearchName" />
        </fieldset>

        <fieldset class="active">
            <legend>Price Range</legend>
            <h4 for="minPrice">Min Price:</h4>
            <input type="number" id="minPrice" value="@Model.MinPrice" />
            <h4 for="maxPrice">Max Price:</h4>
            <input type="number" id="maxPrice" value="@Model.MaxPrice" />
        </fieldset>

        <fieldset class="active">
            <legend>Categories</legend>
            <input type="text" class="filter-search" placeholder="Search categories..." onkeyup="filterCheckboxes('categoryFilter', this.value)" />
            <div id="categoryFilter" class="checkbox-list">
                @foreach (var category in Model.Categories)
                {
                    // Check if category is selected
                    bool isChecked = Model.SelectedCategoryIds != null && Model.SelectedCategoryIds.Contains(category.Id.ToString());

                    <label class="checkbox-label">

                        <input checked=@isChecked type="checkbox" name="category" value="@category.Id" /> <span>@category.Name</span>

                    </label>
                }
            </div>
        </fieldset>

        <fieldset class="active">
            <legend>Suppliers</legend>
            <input type="text" class="filter-search" placeholder="Search suppliers..." onkeyup="filterCheckboxes('supplierFilter', this.value)" />
            <div id="supplierFilter" class="checkbox-list">
                @foreach (var supplier in Model.Suppliers)
                {
                    // Check if supplier is selected
                    bool isChecked = Model.SelectedSupplierIds != null && Model.SelectedSupplierIds.Contains(supplier.Id.ToString());
                    <label class="checkbox-label">

                        <input checked=@isChecked type="checkbox" name="supplier" value="@supplier.Id" /> <span>@supplier.Name</span>

                    </label>
                }
            </div>
        </fieldset>

    </div>

    <span>
        <button type="submit" onclick="applyFilters()">Apply</button>
        <button type="reset" onclick="clearFilters()">Clear</button>
    </span>
</div>

<!-- Cart Modal -->
<div id="cartModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeCartModal()">&times;</span>
        <h3 id="modalProductName"></h3>
        <img id="modalProductImage" class="product-image" />
        <p id="modalProductPrice"></p>
        <label>Quantity:</label>
        <input type="number" id="modalQuantity" min="1" value="1" />
        <button onclick="confirmAddToCart()">Confirm</button>
    </div>
</div>

<!-- Edit Product Modal -->
<div id="editProductModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeEditProductModal()">&times;</span>
        <h3>Edit Product</h3>
        <form id="editProductForm" onsubmit="event.preventDefault()">
            <input type="hidden" id="editProductId" />

            <label>Name:</label>
            <input type="text" id="editProductName" required />

            <label>Price:</label>
            <input type="number" id="editProductPrice" step="0.01" required />

            <label>Category:</label>
            <select id="editProductCategory">
                @foreach (var category in Model.Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>

            <label>Supplier:</label>
            <select id="editProductSupplier">
                @foreach (var supplier in Model.Suppliers)
                {
                    <option value="@supplier.Id">@supplier.Name</option>
                }
            </select>

            <button type="submit" onclick="confirmEditProduct()">Save Changes</button>
            <button type="reset" class="danger" onclick="confirmDeleteProduct()">Delete</button>

        </form>
    </div>
</div>


<!-- CSS Styling -->
<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background: black;
        border: 1px solid #ddd;
        margin: 10% auto;
        padding: 20px;
        width: 300px;
        text-align: center;
        border-radius: 5px;
    }

    .close {
        /* position: absolute; */
        /* right: 15px; */
        margin-left: 80%;
        cursor: pointer;
        font-size: 30px;
    }

    .product-card {
        border: 1px solid #ddd;
        padding: 10px;
        margin: 10px;
        border-radius: 5px;
        transition: 0.3s;
        /* background: #fff; */
    }

    .product-image {
        width: 150px;
        height: 150px;
        object-fit: cover;
        display: block;
    }

    /* Grid View */
    .grid-view {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

        .grid-view .product-card {
            width: 200px;
            text-align: center;
        }

    /* List View */
    .list-view {
        display: flex;
        flex-direction: column;
    }

        .list-view .product-card {
            display: flex;
            align-items: center; /* Ensures proper alignment */
            gap: 15px;
            padding: 15px;
        }

        .list-view .product-image {
            width: 200px; /* Adjusted size for list view */
            height: 200px;
            flex-shrink: 0; /* Prevents image from shrinking */
        }

        .list-view .product-info {
            flex-grow: 1;
        }


    .sort-container {
        margin-bottom: 10px;
        width: 100%;
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }

        .sort-container label {
            padding: 0;
            margin: 0;
            margin-right: 5px;
            font-weight: bold;
        }

        .sort-container select {
            width: 200px;
        }

</style>

<!-- JavaScript -->
<script>
    let selectedProduct = {};

    function openCartModal(id, name, imageUrl, price) {
        let cart = JSON.parse(localStorage.getItem("cart")) || [];
        let existingItem = cart.find(item => item.id === id);
        let quantity = existingItem ? existingItem.quantity : 1; // Use saved quantity or default to 1

        selectedProduct = { id, name, imageUrl, price };
        document.getElementById("modalProductName").innerText = name;
        document.getElementById("modalProductImage").src = imageUrl;
        document.getElementById("modalProductPrice").innerText = "Price: $" + price;
        document.getElementById("modalQuantity").value = quantity;
        document.getElementById("cartModal").style.display = "block";
    }

    function closeCartModal() {
        document.getElementById("cartModal").style.display = "none";
    }

    function confirmAddToCart() {
        let quantity = parseInt(document.getElementById("modalQuantity").value);
        let cart = JSON.parse(localStorage.getItem("cart")) || [];

        // Remove existing entry if exists
        cart = cart.filter(item => item.id !== selectedProduct.id);

        // Add new entry with updated quantity
        cart.push({ ...selectedProduct, quantity });

        localStorage.setItem("cart", JSON.stringify(cart));
        closeCartModal();
        updateCartUI();
        updateCartCount();
        // alert("Cart updated!");

        // Sync cart to user if authenticated
        syncLocalCartToUser();
    }

        function updateCartUI() {
        let local_cart = JSON.parse(localStorage.getItem("cart")) || [];
        let redis_cart = JSON.parse(localStorage.getItem("redisCart")) || [];
        // combine them
        let cart = [...local_cart, ...redis_cart];
        document.querySelectorAll(".product-card").forEach(card => {
            let productId = card.getAttribute("data-id");
            let inCart = cart.some(item => item.id === productId);

            let statusTag = card.querySelector(".cart-status");
            if (inCart) {
                statusTag.innerText = "🛒";
                statusTag.style.display = "inline";
            } else {
                statusTag.style.display = "none";
            }
        });
    }
    // Run updateCartUI on page load to reflect cart status
    document.addEventListener("DOMContentLoaded", updateCartUI);

    function setViewMode(mode) {
        const container = document.getElementById("productContainer");
        container.className = mode === 'grid' ? 'grid-view' : 'list-view';
    }
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<!--Script for signalR-->
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/productHub")
        .build();

    connection.start()
        .then(() => console.log("Connected to SignalR"))
        .catch(err => console.error("SignalR connection failed:", err));

    connection.on("ProductUpdated", () => {
        console.log("Product updated! Refreshing list...");
        location.reload(); // Reload the page when a product is updated
    });

</script>

<!--script to edit products-->
<script>
        function openEditProductModal(id, name, price, categoryId, supplierId) {
        document.getElementById("editProductId").value = id;
        document.getElementById("editProductName").value = name;
        document.getElementById("editProductPrice").value = price;
        document.getElementById("editProductCategory").value = categoryId;
        document.getElementById("editProductSupplier").value = supplierId;

        document.getElementById("editProductModal").style.display = "block";
    }

    function closeEditProductModal() {
        document.getElementById("editProductModal").style.display = "none";
    }

    async function confirmEditProduct() {
        const productId = document.getElementById("editProductId").value;
        const updatedProduct = {
            id: productId,
            name: document.getElementById("editProductName").value,
            price: parseFloat(document.getElementById("editProductPrice").value),
            categoryId: document.getElementById("editProductCategory").value,
            supplierId: document.getElementById("editProductSupplier").value
        };

        try {
            const response = await fetch(`/Products/update/${productId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedProduct)
            });

            if (response.ok) {
                alert("Product updated successfully!");
                window.location.reload(); // Reload page after update
            } else {
                alert("Failed to update product.");
            }
        } catch (error) {
            console.error("Error updating product:", error);
        }
    }

    function confirmDeleteProduct() {
        const productId = document.getElementById("editProductId").value;
        if (confirm("Are you sure you want to delete this product? This action cannot be undone.")) {
            deleteProduct(productId);
        }
    }

    async function deleteProduct(productId) {
        try {
            const response = await fetch(`/Products/delete/${productId}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" }
            });

            if (response.ok) {
                alert("Product deleted successfully!");
                window.location.reload(); // Reload page after delete
            } else {
                alert("Failed to delete product.");
            }
        } catch (error) {
            console.error("Error deleting product:", error);
        }
    }


</script>
