@{
    var isAuthenticated = User.Identity?.IsAuthenticated == true;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Lab2.ShoppingWeb.CartFeature</title>
    @* <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" /> *@
    @* <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" /> *@
    @* <link rel="stylesheet" href="~/Lab2.ShoppingWeb.CartFeature.styles.css" asp-append-version="true" /> *@
    <link rel="stylesheet" href="https://matcha.mizu.sh/matcha.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
</head>
<body class="layout-simple" data-color-scheme="dark">
    <header class="navbar"
            data-color-scheme="dark"
            style="padding-bottom: 15px">
        <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">Lab2</a>

        <div class="nav-actions">
            <a class="color-scheme cart-btn" onclick="toggleTheme()">
                <i class="fa-regular fa-sun light-mode " style="display:none"></i>
                <i class="fa-regular fa-moon dark-mode "></i>
            </a>
            <a asp-controller="Cart" asp-action="Index" class="cart-btn">
                <i class="fas fa-shopping-cart"></i>
                <span id="cart-count" class="cart-badge">0</span>
            </a>
            @if (User.Identity?.IsAuthenticated == true)
            {
                <form asp-controller="Auth" asp-action="Logout" method="post" class="auth-btn">
                    <button type="submit" class="btn btn-danger">Logout</button>
                </form>
            }
            else
            {
                <div class="auth-btn">
                    <button onclick="signInWithFirebase()" class="btn btn-primary">Login</button>
                </div>
            }
        </div>
    </header>
    <aside data-expandable>
        <nav>
            <div class="container-fluid">
                <div>
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" href="@Url.Action("Index", "Home")">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" href="@Url.Action("Index", "Products")">Products</a>
                        </li>
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" href="@Url.Action("Index", "Orders")">My Orders</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" href="@Url.Action("Logout", "Auth")">Logout</a>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" href="@Url.Action("Login", "Auth")">Login</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </aside>
    <main role="main"
          style="min-height:90vh">
        @RenderBody()
    </main>
    <aside data-expandable id="aside-right">
        <!--TODO: make a filter UI there-->
    </aside>
    <footer class="border-top footer text-muted"
            style="padding-top: 20px; padding-bottom: 20px">
        <p>
            &copy; 2025 - Lab2.ShoppingWeb - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </p>
    </footer>
    <style>
        input[type="checkbox"] {
            width: 30px;
            height: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: #333;
            color: white;
        }

        .navbar-brand {
            font-size: 1.5rem;
            font-weight: bold;
            text-decoration: none;
            color: white;
        }

        .nav-actions {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .cart-btn {
            position: relative;
            font-size: 1.5rem;
            color: white;
            text-decoration: none;
        }

        .cart-badge {
            position: absolute;
            top: -5px;
            right: -10px;
            background: red;
            color: white;
            font-size: 0.8rem;
            font-weight: bold;
            padding: 2px 6px;
            border-radius: 50%;
        }

        .auth-btn .btn {
            padding: 8px 15px;
            font-size: 1rem;
        }

        .auth-btn {
            padding: 1rem;
            margin: 0 auto 1rem;
            background: transparent;
        }

        #filters {
            margin-right: 20px;
            margin-top: 20px;
            padding: 5px;
            /* border: 1px solid #ddd; */
        }

        .filter-section {
            margin-bottom: 15px;
        }

        .filter-search {
            width: 100%;
            padding: 5px;
            margin-bottom: 5px;
        }

        .checkbox-list {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 5px;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            gap: 5px; /* Add space between checkbox and text */
        }

            .checkbox-label span {
                width: 100%;
            }

        h4 {
            margin-top: 10px;
            margin-bottom: 5px;
        }

        .pagination-container {
            display: flex;
            align-items: center;
            gap: 5px;
            margin-top: 20px;
        }

        .page-btn {
            padding: 5px 10px;
            border: 1px solid #ccc;
            cursor: pointer;
        }

            .page-btn.active {
                font-weight: bold;
                background: #007bff;
                color: white;
                border-color: #007bff;
            }

        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    </style>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <!--Script to update cart item number-->
    <script>

             // move filter to Be chilren Of id aside-right
        const filters = document.getElementById("filters");
        const aside = document.getElementById("aside-right");
        if (filters && aside) {
            aside.appendChild(filters);
        }

            function applyFilters() {
            const searchName = document.getElementById("searchName").value;
            const minPrice = document.getElementById("minPrice").value;
            const maxPrice = document.getElementById("maxPrice").value;
            const selectedCategories = Array.from(document.querySelectorAll("input[name='category']:checked"))
                .map(cb => cb.value)
                .join(",");
            const selectedSuppliers = Array.from(document.querySelectorAll("input[name='supplier']:checked"))
                .map(cb => cb.value)
                .join(",");

            const queryParams = new URLSearchParams({
                searchName: searchName,
                minPrice: minPrice,
                maxPrice: maxPrice,
                categoryIds_string: selectedCategories,
                supplierIds_string: selectedSuppliers,
            });

            window.location.href = `/Products?${queryParams.toString()}`;
            }

            function clearFilters() {
                window.location.href = "/Products";
            }

            function applySort() {
                const sort = document.getElementById("sort").value;
                const urlParams = new URLSearchParams(window.location.search);
                urlParams.set("sort", sort);
                window.location.href = `/Products?${urlParams.toString()}`;
            }

            function changePage(page){
                // keep all the current search params but add the page
                const urlParams = new URLSearchParams(window.location.search);
                urlParams.set("page", page);
                window.location.href = `/Products?${urlParams.toString()}`;
            }

            function filterCheckboxes(containerId, searchValue) {
                const checkboxes = document.querySelectorAll(`#${containerId} label`);
                const filter = searchValue.toLowerCase();

                checkboxes.forEach(label => {
                    const text = label.textContent.toLowerCase();
                    label.style.display = text.includes(filter) ? "flex" : "none";
                });
            }


        function updateCartCount() {
            let cart = JSON.parse(localStorage.getItem("cart")) || [];
            let totalItems = cart.length;
            document.getElementById("cart-count").innerText = totalItems;
            try {
                fetch("/Cart/get")
                .then(response => response.json())
                .then(data => {
                    const length = data.length === 0 ? totalItems : data.length;
                    document.getElementById("cart-count").innerText = length;
                    // save to local storage
                    localStorage.setItem("redisCart", JSON.stringify(data));
                });
            } catch (error) {
                console.error("Error:", error);
            }
        }
        // Update cart count on page load
        document.addEventListener("DOMContentLoaded", updateCartCount);

        // Listen for cart updates
        window.addEventListener("storage", updateCartCount);
    </script>

    <script>
        // change html data-color-scheme to light/dark
        // show/hide the icon in header
        function toggleTheme() {
            const body = document.body;
            const currentTheme = body.dataset.colorScheme || "light";
            const newTheme = currentTheme === "light" ? "dark" : "light";
            body.dataset.colorScheme = newTheme;
            // set theme to local storage
            localStorage.setItem("color-scheme", newTheme);
            // Update the icon
            const lightIcon = document.querySelector(".light-mode");
            const darkIcon = document.querySelector(".dark-mode");
            if (newTheme === "light") {
                lightIcon.style.display = "block";
                darkIcon.style.display = "none";
            } else {
                lightIcon.style.display = "none";
                darkIcon.style.display = "block";
            }
        }

        // Load theme from local storage
        const savedTheme = localStorage.getItem("color-scheme");
        if (savedTheme) {
            document.body.dataset.colorScheme = savedTheme;
            if (savedTheme === "dark") {
                const lightIcon = document.querySelector(".light-mode");
                const darkIcon = document.querySelector(".dark-mode");
                lightIcon.style.display = "none";
                darkIcon.style.display = "block";
            }
        }
    </script>

    <!-- Firebase SDK (Use module-based imports) -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-app.js";
        import { getAuth, signInWithPopup, GoogleAuthProvider } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-auth.js";

        // Firebase config
        const firebaseConfig = {
            apiKey: "AIzaSyBgC99_9xkOO3yDrOrYuIA7ptv_soCBkOI",
            authDomain: "prn222-lab2.firebaseapp.com",
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        // Attach function to global scope
        window.signInWithFirebase = function () {
            signInWithPopup(auth, provider).then(async (result) => {
                const idToken = await result.user.getIdToken();
                const form = document.createElement("form");
                form.method = "POST";
                form.action = "/Auth/Login";
                const input = document.createElement("input");
                input.type = "hidden";
                input.name = "idToken";
                input.value = idToken;
                form.appendChild(input);

                // Preserve ReturnUrl if present
                const urlParams = new URLSearchParams(window.location.search);
                const returnUrl = urlParams.get("ReturnUrl");
                if (returnUrl) {
                    const returnInput = document.createElement("input");
                    returnInput.type = "hidden";
                    returnInput.name = "returnUrl";
                    returnInput.value = returnUrl;
                    form.appendChild(returnInput);
                }

                document.body.appendChild(form);
                form.submit();
            }).catch(error => {
                console.error("Login failed:", error);
            });
        };
    </script>

    @if (isAuthenticated)
    {
        <script>
            function syncLocalCartToUser()
            {
                let cart = JSON.parse(localStorage.getItem("cart")) || [];
                fetch("/Cart/sync", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(cart)
                })
                    .then(response => {
                        if (response.ok) {
                            localStorage.removeItem("cart");
                            updateCartUI();
                            updateCartCount();
                        }
                    });
            }
            syncLocalCartToUser();
        </script>
    }
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
